name: Python CI

on:
  workflow_dispatch:

  pull_request:
    branches:
      - main

jobs:
  flake8_and_pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Shallow clone to have the previous commit for checking Dockerfile changes.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Analyzing the code with flake8
        run: flake8 -v --max-line-length=79 .
      - name: Install dependencies for example tests
        run: |
          pip install poetry
          poetry config virtualenvs.create false
          poetry install

      - name: Run example usage
        run: |
          cd examples/
          ./example_usage.py

      - name: Run example pytests(easy)
        run: |
          cd examples/
          pytest -v -s -m "simple_process_test and easy" tests/
      - name: Run example pytests(hard)
        run: |
          cd examples/
          pytest -v -s -m "simple_process_test and hard" tests/

      - name: Check if examples/Dockerfile has changed
        id: check-dockerfile
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q "examples/Dockerfile"; then
            echo "examples/Dockerfile has changed. Proceeding with build."
            echo "DOCKERFILE_CHANGED=true" >> $GITHUB_OUTPUT
          else
            echo "examples/Dockerfile has not changed. Pulling image instead."
            echo "DOCKERFILE_CHANGED=false" >> $GITHUB_OUTPUT
          fi
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Remove the previous docker container
        run: docker rm -f example_app
      - name: Build the Docker image
        if: steps.check-dockerfile.outputs.DOCKERFILE_CHANGED == 'true'
        run: docker build -f examples/Dockerfile -t ghcr.io/nunoya-yuma/blabot/example-app:latest ./
      - name: Login to GitHub Container Registry
        if: steps.check-dockerfile.outputs.DOCKERFILE_CHANGED == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull the latest docker image
        if: steps.check-dockerfile.outputs.DOCKERFILE_CHANGED == 'false'
        run: docker pull ghcr.io/nunoya-yuma/blabot/example-app:latest
      - name: Run docker related pytests(from outside)
        run: |
          cd examples/
          pytest -v -s -m "docker_test" tests/
      - name: Run docker and mount files and run pytests(from inside)
        run: |
          DOCKER_COMMAND="pytest -v -s -m docker_inner_test tests/"
          docker run -i --rm -v $(pwd)/:/app/work -w /app/work/examples --name example_app ghcr.io/nunoya-yuma/blabot/example-app:latest bash -c "${DOCKER_COMMAND}"
      # This test must be run inside a container, because tty does not work well in GitHub Actions.
      - name: Run serial device pytests
        run: docker run -i --rm -v $(pwd)/:/app/work -w /app/work/examples --name example_app ghcr.io/nunoya-yuma/blabot/example-app:latest bash scripts/run_device_test.sh

      # TODO: Investigate how to do testing on GitHub Actions regarding SSH.
